name: Convert Markdown to PDF
on:
  push:
    paths:
      - '**.md'  # Trigger only when .md files change
      
jobs:
  convert:
    runs-on: ubuntu-latest
    # Uses GitHub's native runner with Git preinstalled
    container:
      image: pandoc/latex:latest  # Official Pandoc+LaTeX image
      
    steps:
      # - name: Install Git
      #   run: apt-get update && apt-get install -y git

      # - name: Checkout repository
      #   uses: actions/checkout@v4
        # with:
        #   fetch-depth: 0  # Required to detect changed files
      
      # - name: Install Git
      #   run: |
      #     sudo apt-get update 
      #     sudo apt-get install -y git

      # - name: Setup Pandoc and LaTeX
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y pandoc texlive-full
      #     sudo tlmgr install eisvogel beamer-metropolis
          
      # - name: Find modified Markdown files
      #   id: changed-files
      #   uses: tj-actions/changed-files@v42
      #   with:
      #     files: '**.md'
      #     since_last_remote_commit: 'true'
          
      # - name: Install missing LaTeX packages (if needed)
      #   run: |
      #     tlmgr update --self
      #     tlmgr install beamer
      #     # tlmgr navigation
      - name: Get changed files via GitHub API
        id: changed-files
        uses: jitterbit/get-changed-files@v1
        with:
          format: space-delimited  # Lista de archivos separados por espacios

      - name: Filter Markdown files
        id: filter-md
        run: |
          # Filtra solo archivos .md
          md_files=$(echo "${{ steps.changed-files.outputs.all }}" | tr ' ' '\n' | grep '\.md$' || true)
          echo "changed_md_files=$md_files" >> $GITHUB_OUTPUT
          echo "Markdown files changed: $md_files"

      - name: Process files in container
        run: |
          for file in ${{ steps.filter-md.outputs.changed_md_files }}; do
              echo "Processing file: ${md}"
              # Check if the markdown file indicates it's a Beamer presentation by searching for a 'Beamer' keyword in metadata
              if grep -qi 'beamer' "${md}"; then
                  echo "Detected Beamer presentation in ${md}. Converting using Beamer template."
                  pandoc "${md}" -t beamer -o "${md%.*}.pdf"
              else
                  echo "Converting ${md} as a standard markdown document."
                  pandoc "${md}" -o "${md%.*}.pdf"
              fi
          done

      # - name: Get list of modified markdown files
      #   id: files
      #   run: |
      #     # List markdown files changed in the commit or pull request
      #     files=$(git diff --name-only ${{ github.sha }}^ ${{ github.sha }} | grep '\.md$' || true)
      #     echo "changed_md_files=$files" >> $GITHUB_OUTPUT
      #     echo "Found the following markdown files to convert:"
      #     echo "$files"

      # - name: Convert markdown files to PDF
      #   if: steps.files.outputs.changed_md_files != ''
      #   run: |
      #     # Split the list into an array
      #     IFS=$'\n' read -r -d '' -a md_files <<< "${{ steps.files.outputs.changed_md_files }}" || true
      #     for md in "${md_files[@]}"; do
      #         echo "Processing file: ${md}"
      #         # Check if the markdown file indicates it's a Beamer presentation by searching for a 'Beamer' keyword in metadata
      #         if grep -qi 'beamer' "${md}"; then
      #             echo "Detected Beamer presentation in ${md}. Converting using Beamer template."
      #             pandoc "${md}" -t beamer -o "${md%.*}.pdf"
      #         else
      #             echo "Converting ${md} as a standard markdown document."
      #             pandoc "${md}" -o "${md%.*}.pdf"
      #         fi
      #     done
      
      # - name: Convert to PDF
      #   run: |
      #     for file in $(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '\.md$'); do
      #       if [[ -f "$file" ]]; then
      #         echo "Processing $file..."
      #         output="${file%.md}.pdf"

      #         # Check if file contains presentation markers
      #         if grep -q '^theme:' "$file" || grep -q '^class: beamer' "$file"; then
      #           pandoc "$file" -o "$output" \
      #             -t beamer \
      #             -V theme:metropolis \
      #             --pdf-engine=xelatex
              
      #         else
      #           pandoc "$file" -o "$output" \
      #             --template=eisvogel \
      #             --listings \
      #             -V geometry:margin=1.5cm \
      #             --pdf-engine=xelatex
      #         fi
      #       fi
      #     done

      - name: Upload PDF artifacts
        uses: actions/upload-artifact@v4
        with:
          name: generated-pdfs
          path: '**.pdf'
